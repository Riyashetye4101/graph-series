class Solution {
public:
    void bfs(int r,int c,vector<vector<char>> &adj, vector<vector<bool>> &visited,int n,int m){
        
        int rk[]={-1,0,1,0};
        int ck[]={0,1,0,-1};
        queue<pair<int,int>> q;
        q.push({r,c});
        visited[r][c]=true;
        int size_of=sizeof(rk)/sizeof(rk[0]);
        while(!q.empty()){

            int row=q.front().first;
            int col=q.front().second;

            q.pop();
 
            for(int k=0;k<size_of;k++){
                int nrow=row+rk[k];
                int ncol=col+ck[k];

                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && adj[nrow][ncol]=='1' && !visited[nrow][ncol]){
                    q.push({nrow,ncol});
                    visited[nrow][ncol]=true;
                }
            }

        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int count=0;
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<bool>> visited(n,vector<bool>(m,false));
         
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]=='1' && !visited[i][j]){
                    count++;
                    bfs(i,j,grid,visited,n,m);
                }
            }
        }
        return count;
    }
};
