class Solution {
public:
    void bfs(int i,int j, vector<vector<char>> &adj,vector<vector<bool>> &visited,int n,int m){
        
        queue<pair<int,int>> q;
        q.push({i,j});
        visited[i][j]=true;
        

        while(!q.empty()){
            int row=q.front().first;
            int col=q.front().second;
            q.pop();
 

              //for neighbouring lands.
            for(int drow=-1; drow<=1; drow++) {
                for(int dcol=-1; dcol<=1; dcol++){
                    if(drow==-1&&dcol==0||drow==0&&dcol==1||drow==1&&dcol==0||drow==0&&dcol==-1){
                        int nrow=row+drow;
                        int ncol=col+dcol;
                        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m 
                           && adj[nrow][ncol]=='1' && !visited[nrow][ncol]) {
                            visited[nrow][ncol]=1;
                            q.push({nrow, ncol});
                        }
                    }
                }
            }
                
            
        }
    }
    int numIslands(vector<vector<char>>& grid) {
    
        int count=0;
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<bool>> visited(n,vector<bool>(m,false));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]=='1' && !visited[i][j]){
                    count++;
                    bfs(i,j,grid,visited,n,m);
                }
            }
        }
        return count;
    }
};
