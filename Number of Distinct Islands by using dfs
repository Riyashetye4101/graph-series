//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    int rk[4]={-1,0,1,0};
    int ck[4]={0,1,0,-1};
    void dfs(int r,int c,vector<vector<int>> &adj,vector<vector<bool>> &visited,int n,int m,
    vector<pair<int,int>> &ans,int pr,int pc){
        
        visited[r][c]=true;
        pair<int,int> p={r-pr,c-pc};
        ans.push_back(p);
        for(int k=0;k<4;k++){
            int nr=r+this->rk[k];
            int nc=c+this->ck[k];
            if(nr>=0 && nr<n && nc>=0 && nc<m && adj[nr][nc]==1 && !visited[nr][nc]){
                
                dfs(nr,nc,adj,visited,n,m,ans,pr,pc);
            }
        }
    }
    int countDistinctIslands(vector<vector<int>>& grid) {
        // code here
        int n=grid.size();
        int m=grid[0].size();
        set<vector<pair<int,int>>> st;
        vector<vector<bool>> visited(n,vector<bool>(m,false));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 && !visited[i][j]){
                    
                    vector<pair<int,int>> p;
                    dfs(i,j,grid,visited,n,m,p,i,j);
                
                    st.insert(p);
                }
            }
        }
        
        return st.size();
    }
};


//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid(n, vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        cout << obj.countDistinctIslands(grid) << endl;
    }
}
// } Driver Code Ends
