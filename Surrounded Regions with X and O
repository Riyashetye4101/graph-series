class Solution {
public:
    int rk[4]={-1,0,1,0};
    int ck[4]={0,1,0,-1};
    void dfs(int r,int c,vector<vector<char>> &adj,vector<vector<bool>> &visited,int n,int m){
        visited[r][c]=true;
        for(int k=0;k<4;k++){
            int row=r+this->rk[k];
            int col=c+this->ck[k];
            if(row>=0 && col>=0 && row<n && col<m && adj[row][col]=='O' && !visited[row][col]){
                dfs(row,col,adj,visited,n,m);
            }
        }
    }
    void solve(vector<vector<char>>& board) {
        int n=board.size();
        int m=board[0].size();
        vector<vector<bool>> visited(n,vector<bool>(m,false));
        for(int i=0;i<n;i++){
            if(board[i][0]=='O' && !visited[i][0]){
                dfs(i,0,board,visited,n,m);
            }
        }
        for(int i=0;i<n;i++){
            if(board[i][m-1]=='O' && !visited[i][m-1]){
                dfs(i,m-1,board,visited,n,m);
            }
        }
        for(int i=0;i<m;i++){
            if(board[0][i]=='O' && !visited[0][i]){
                dfs(0,i,board,visited,n,m);
            }
        }
        for(int i=0;i<m;i++){
            if(board[n-1][i]=='O' && !visited[n-1][i]){
                dfs(n-1,i,board,visited,n,m);
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!visited[i][j]){
                    board[i][j]='X';
                }
            }
        }
    }
};
