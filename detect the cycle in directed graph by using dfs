//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool dfs(int node,vector<int> *adj,vector<bool> &vis,vector<bool> &pathvis){
        vis[node]=true;
        pathvis[node]=true;
        bool res=false;
        for(int child:adj[node]){
            if(!vis[child]){
                res=res||dfs(child,adj,vis,pathvis);
            }else if(vis[child] && pathvis[child]){
                return true;
            }
        }
        pathvis[node]=false;
        return res;
    }
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        vector<bool> vis(V,false);
        for(int i=0;i<V;i++){
            
            if(!vis[i]){
                vector<bool> pathvis(V,false);
                if(dfs(i,adj,vis,pathvis)) return true;
            }
        }
        return false;
    }
};

//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}

// } Driver Code Ends
