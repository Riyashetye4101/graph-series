class Solution {
public:
// here we won't get multiple paths.
   void dfs(int node,vector<int> &edges, vector<int> &vis,int dis){
           vis[node]=dis;
           int child=edges[node];
           if(child!=-1 && vis[child]==-1){
               dfs(child,edges,vis,dis+1);
           }
   }
    void bfs(int node,vector<int> &edges, vector<int> &vis){
        queue<pair<int,int>> q;
        q.push({node,0});
        vis[node]=0;
        while(!q.empty()){
            int x=q.front().first;
            int dis=q.front().second;
            q.pop();
            int child=edges[x];
            if(child!=-1 && vis[child]==-1){
                vis[child]=dis+1;
                q.push({child,dis+1});
            }
        }
    }
    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        int n=edges.size();
        vector<int> vis1(n,-1);
        vector<int> vis2(n,-1);
        dfs(node1,edges,vis1,0);
        dfs(node2,edges,vis2,0);
        pair<int,int> p={-1,INT_MAX};  //(node,dis)
        for(int i=0;i<n;i++){
            if(vis1[i]!=-1 && vis2[i]!=-1){
                int maxi=max(vis1[i],vis2[i]);
                if(p.second>maxi){
                    p.second=maxi;
                    p.first=i;
                }
            }
        }
        return p.first;
    }
};
